import React, { useState } from 'react';
import { motion, AnimatePresence } from 'motion/react';
import { Mail, MessageSquare, ArrowRight, Check, Loader2 } from 'lucide-react';
import { toast } from 'sonner@2.0.3';

interface OnboardingAuthScreenProps {
  onNext: () => void;
  onBack: () => void;
  onSkip: () => void;
}

type AuthMethod = 'email' | 'telegram' | null;
type AuthStep = 'method' | 'input' | 'verify';

export const OnboardingAuthScreen: React.FC<OnboardingAuthScreenProps> = ({
  onNext,
  onBack,
  onSkip
}) => {
  const [authMethod, setAuthMethod] = useState<AuthMethod>(null);
  const [currentStep, setCurrentStep] = useState<AuthStep>('method');
  const [contact, setContact] = useState('');
  const [verificationCode, setVerificationCode] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [codeSent, setCodeSent] = useState(false);

  // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
  const handleSendCode = async () => {
    if (!contact) {
      toast.error('–í–≤–µ–¥–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if (authMethod === 'email') {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(contact)) {
        toast.error('–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
        return;
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ username)
    if (authMethod === 'telegram') {
      const telegramRegex = /^@?[a-zA-Z0-9_]{5,32}$/;
      if (!telegramRegex.test(contact)) {
        toast.error('–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram username (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)');
        return;
      }
    }

    setIsLoading(true);
    
    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    setIsLoading(false);
    setCodeSent(true);
    setCurrentStep('verify');
    
    toast.success(`–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${authMethod === 'email' ? '—Ç–≤–æ—é –ø–æ—á—Ç—É' : '—Ç–≤–æ–π Telegram'} ‚ú®`);
  };

  // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
  const handleVerifyCode = async () => {
    if (verificationCode.length !== 6) {
      toast.error('–í–≤–µ–¥–∏ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥');
      return;
    }

    setIsLoading(true);
    
    // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –î–ª—è –¥–µ–º–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    setIsLoading(false);
    toast.success('–û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üéâ');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –¥–ª—è –ø–æ–∫–∞–∑–∞ success —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setTimeout(() => {
      onNext();
    }, 800);
  };

  const handleMethodSelect = (method: AuthMethod) => {
    setAuthMethod(method);
    setCurrentStep('input');
  };

  const handleBackClick = () => {
    if (currentStep === 'verify') {
      setCurrentStep('input');
      setVerificationCode('');
      setCodeSent(false);
    } else if (currentStep === 'input') {
      setCurrentStep('method');
      setContact('');
      setAuthMethod(null);
    } else {
      onBack();
    }
  };

  return (
    <div className="min-h-screen flex flex-col bg-background relative overflow-hidden">
      {/* –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ–Ω */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-0 left-1/4 w-96 h-96 bg-purple-500/20 rounded-full blur-3xl animate-pulse" />
        <div className="absolute bottom-0 right-1/4 w-96 h-96 bg-pink-500/20 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '1s' }} />
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="flex-1 flex flex-col items-center justify-center p-6 relative z-10">
        <div className="w-full max-w-md space-y-8">
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="flex items-center justify-center gap-2 mb-8"
          >
            <div className="h-2 w-2 rounded-full bg-primary" />
            <div className={`h-2 w-16 rounded-full ${currentStep !== 'method' ? 'bg-primary' : 'bg-white/20'}`} />
            <div className={`h-2 w-2 rounded-full ${currentStep === 'verify' ? 'bg-primary' : 'bg-white/20'}`} />
          </motion.div>

          <AnimatePresence mode="wait">
            {/* –®–ê–ì 1: –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ */}
            {currentStep === 'method' && (
              <motion.div
                key="method"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                className="space-y-6"
              >
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                <div className="text-center space-y-3">
                  <motion.div
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    transition={{ type: "spring", duration: 0.6 }}
                    className="text-6xl mb-4"
                  >
                    ‚ú®
                  </motion.div>
                  <h1 className="text-3xl font-bold text-foreground">
                    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
                  </h1>
                  <p className="text-lg text-muted-foreground">
                    –ù–∞—á–Ω–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–±:
                  </p>
                </div>

                {/* –ö–∞—Ä—Ç–æ—á–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ */}
                <div className="space-y-3">
                  <motion.button
                    whileHover={{ scale: 1.02, y: -2 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={() => handleMethodSelect('email')}
                    className="w-full bliq-glass-button p-5 rounded-2xl transition-all"
                  >
                    <div className="flex items-center gap-4">
                      <div className="icon-gradient-blue w-14 h-14 rounded-xl flex items-center justify-center flex-shrink-0">
                        <Mail className="w-7 h-7 text-white" />
                      </div>
                      <div className="flex-1 text-left">
                        <h3 className="font-semibold text-foreground mb-0.5">
                          Email
                        </h3>
                        <p className="text-xs text-muted-foreground">
                          –û—Ç–ø—Ä–∞–≤–∏–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Ç–≤–æ—é –ø–æ—á—Ç—É
                        </p>
                      </div>
                      <ArrowRight className="w-5 h-5 text-muted-foreground/60 flex-shrink-0" />
                    </div>
                  </motion.button>

                  <motion.button
                    whileHover={{ scale: 1.02, y: -2 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={() => handleMethodSelect('telegram')}
                    className="w-full bliq-glass-button p-5 rounded-2xl transition-all"
                  >
                    <div className="flex items-center gap-4">
                      <div className="icon-gradient-blue w-14 h-14 rounded-xl flex items-center justify-center flex-shrink-0">
                        <MessageSquare className="w-7 h-7 text-white" />
                      </div>
                      <div className="flex-1 text-left">
                        <h3 className="font-semibold text-foreground mb-0.5">
                          Telegram
                        </h3>
                        <p className="text-xs text-muted-foreground">
                          –û—Ç–ø—Ä–∞–≤–∏–º –∫–æ–¥ –≤ Telegram –±–æ—Ç
                        </p>
                      </div>
                      <ArrowRight className="w-5 h-5 text-muted-foreground/60 flex-shrink-0" />
                    </div>
                  </motion.button>
                </div>
              </motion.div>
            )}

            {/* –®–ê–ì 2: –í–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞ */}
            {currentStep === 'input' && (
              <motion.div
                key="input"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                className="space-y-6"
              >
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                <div className="text-center space-y-3">
                  <motion.div
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    transition={{ type: "spring", duration: 0.6 }}
                    className="w-16 h-16 mx-auto rounded-2xl bg-gradient-to-br from-primary/20 to-pink-500/20 flex items-center justify-center"
                  >
                    {authMethod === 'email' ? (
                      <Mail className="w-8 h-8 text-primary" />
                    ) : (
                      <MessageSquare className="w-8 h-8 text-blue-400" />
                    )}
                  </motion.div>
                  <h1 className="text-2xl font-bold text-foreground">
                    {authMethod === 'email' ? '–¢–≤–æ–π email' : '–¢–≤–æ–π Telegram'}
                  </h1>
                  <p className="text-base text-muted-foreground">
                    {authMethod === 'email' 
                      ? '–í–≤–µ–¥–∏ —Å–≤–æ—é –ø–æ—á—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞'
                      : '–í–≤–µ–¥–∏ —Å–≤–æ–π Telegram username'}
                  </p>
                </div>

                {/* –ò–Ω–ø—É—Ç */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 }}
                  className="space-y-4"
                >
                  <div className="relative">
                    <input
                      type={authMethod === 'email' ? 'email' : 'text'}
                      value={contact}
                      onChange={(e) => setContact(e.target.value)}
                      placeholder={authMethod === 'email' ? 'example@email.com' : '@username'}
                      className="w-full px-4 py-4 bg-white/5 border border-white/20 rounded-xl text-foreground placeholder:text-muted-foreground focus:outline-none focus:border-primary/50 transition-colors"
                      autoFocus
                      onKeyPress={(e) => {
                        if (e.key === 'Enter') {
                          handleSendCode();
                        }
                      }}
                    />
                  </div>

                  <motion.button
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={handleSendCode}
                    disabled={isLoading}
                    className="w-full py-4 rounded-xl bg-gradient-to-r from-primary to-pink-500 text-white font-semibold flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
                  >
                    {isLoading ? (
                      <>
                        <Loader2 className="w-5 h-5 animate-spin" />
                        –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...
                      </>
                    ) : (
                      <>
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥
                        <ArrowRight className="w-5 h-5" />
                      </>
                    )}
                  </motion.button>
                </motion.div>

                {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.2 }}
                  className="text-center text-sm text-muted-foreground"
                >
                  {authMethod === 'email' ? (
                    <p>
                      –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É.
                      <br />
                      –ü—Ä–æ–≤–µ—Ä—å –ø–∞–ø–∫—É "–°–ø–∞–º", –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—à—å –ø–∏—Å—å–º–æ.
                    </p>
                  ) : (
                    <p>
                      –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞—à Telegram –±–æ—Ç.
                      <br />
                      –ö–æ–¥ –ø—Ä–∏–¥–µ—Ç –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
                    </p>
                  )}
                </motion.div>
              </motion.div>
            )}

            {/* –®–ê–ì 3: –í–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
            {currentStep === 'verify' && (
              <motion.div
                key="verify"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                className="space-y-6"
              >
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                <div className="text-center space-y-3">
                  <motion.div
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    transition={{ type: "spring", duration: 0.6 }}
                    className="w-16 h-16 mx-auto rounded-2xl bg-gradient-to-br from-green-500/20 to-emerald-500/20 flex items-center justify-center"
                  >
                    <Check className="w-8 h-8 text-green-400" />
                  </motion.div>
                  <h1 className="text-2xl font-bold text-foreground">
                    –ü—Ä–æ–≤–µ—Ä—å –∫–æ–¥
                  </h1>
                  <p className="text-base text-muted-foreground">
                    –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥ –Ω–∞{' '}
                    <span className="text-foreground font-semibold">
                      {contact}
                    </span>
                  </p>
                </div>

                {/* –ò–Ω–ø—É—Ç –∫–æ–¥–∞ */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 }}
                  className="space-y-4"
                >
                  <div className="relative">
                    <input
                      type="text"
                      value={verificationCode}
                      onChange={(e) => {
                        const value = e.target.value.replace(/\D/g, '').slice(0, 6);
                        setVerificationCode(value);
                      }}
                      placeholder="000000"
                      maxLength={6}
                      className="w-full px-4 py-4 bg-white/5 border border-white/20 rounded-xl text-foreground text-center text-2xl tracking-widest placeholder:text-muted-foreground focus:outline-none focus:border-primary/50 transition-colors"
                      autoFocus
                      onKeyPress={(e) => {
                        if (e.key === 'Enter' && verificationCode.length === 6) {
                          handleVerifyCode();
                        }
                      }}
                    />
                  </div>

                  <motion.button
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={handleVerifyCode}
                    disabled={isLoading || verificationCode.length !== 6}
                    className="w-full py-4 rounded-xl bg-gradient-to-r from-green-500 to-emerald-500 text-white font-semibold flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
                  >
                    {isLoading ? (
                      <>
                        <Loader2 className="w-5 h-5 animate-spin" />
                        –ü—Ä–æ–≤–µ—Ä—è–µ–º...
                      </>
                    ) : (
                      <>
                        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                        <Check className="w-5 h-5" />
                      </>
                    )}
                  </motion.button>
                </motion.div>

                {/* –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ */}
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.2 }}
                  className="text-center"
                >
                  <button
                    onClick={() => {
                      setCurrentStep('input');
                      setVerificationCode('');
                      setCodeSent(false);
                      toast.success('–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –∑–∞–Ω–æ–≤–æ');
                    }}
                    className="text-sm text-primary hover:underline"
                  >
                    –ù–µ –ø—Ä–∏—à–µ–ª –∫–æ–¥? –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ
                  </button>
                </motion.div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="p-6 flex items-center justify-between border-t border-white/10"
      >
        <button
          onClick={handleBackClick}
          className="px-6 py-3 rounded-xl text-muted-foreground hover:text-foreground transition-colors"
        >
          –ù–∞–∑–∞–¥
        </button>
        
        <button
          onClick={onSkip}
          className="px-6 py-3 rounded-xl text-muted-foreground hover:text-foreground transition-colors"
        >
          –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        </button>
      </motion.div>
    </div>
  );
};