import React from 'react';
import { motion } from 'motion/react';
import { TrendingUp, TrendingDown, Users, Target, Award, Crown, BarChart3, Activity, Zap, Star, Brain, Trophy, Flame, ArrowUp, ArrowDown, Minus } from 'lucide-react';

interface PersonalizedTrendsStats {
  currentValue: number;
  energy: number;
  rankAmongUserSuperpowers: number;
  totalUserSuperpowers: number;
  friendsWithSameSuperpower: number;
  averageValueAmongFriends: number;
  userValueVsFriends: 'above' | 'below' | 'average';
  growthPotential: number;
  recentTrend: 'rising' | 'falling' | 'stable';
  weeklyGrowth: number;
  monthlyGrowth: number;
  strengthInCircle: number; // –°–∏–ª–∞ –≤ –∫—Ä—É–≥—É –¥—Ä—É–∑–µ–π (1-100)
  uniquenessScore: number; // –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ä–µ–¥–∏ –¥—Ä—É–∑–µ–π (1-100)
  peakActivityTime: string;
  superpowerMomentum: 'heating_up' | 'cooling_down' | 'stable';
}

interface PersonalizedTrendsWidgetProps {
  superpowerName: string;
  superpowerEmoji: string;
  stats: PersonalizedTrendsStats;
  userSuperpowers?: Array<{name: string; emoji: string; value: number; trend: 'up' | 'down' | 'stable'}>;
}

export function PersonalizedTrendsWidget({ 
  superpowerName,
  superpowerEmoji,
  stats,
  userSuperpowers = []
}: PersonalizedTrendsWidgetProps) {
  
  // –¢–æ–ø —Å—É–ø–µ—Ä—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π (—Å fallback –¥–∞–Ω–Ω—ã–º–∏)
  const personalSuperpowerRanking = userSuperpowers.length > 0 
    ? userSuperpowers
        .map(sp => ({
          ...sp,
          current: sp.name === superpowerName
        }))
        .sort((a, b) => b.value - a.value)
        .slice(0, 5)
    : [
        { name: '–ö–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', emoji: 'üì±', value: 92, trend: 'up' as const, current: superpowerName === '–ö–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥' },
        { name: '–•–∞—Ä–∏–∑–º–∞', emoji: 'üëë', value: 88, trend: 'stable' as const, current: superpowerName === '–•–∞—Ä–∏–∑–º–∞' },
        { name: '–ö—Ä—É—Ç–æ–π —Å—Ç–∏–ª—å', emoji: '‚ùÑÔ∏è', value: 84, trend: 'up' as const, current: superpowerName === '–ö—Ä—É—Ç–æ–π —Å—Ç–∏–ª—å' },
        { name: '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞', emoji: 'ü§ù', value: 82, trend: 'down' as const, current: superpowerName === '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞' },
        { name: '–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å', emoji: 'üß†', value: 78, trend: 'stable' as const, current: superpowerName === '–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å' }
      ].filter(sp => sp.current || sp.value > stats.currentValue - 20);

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥—Ä—É–∑—å—è–º–∏
  const friendsComparison = [
    { name: '–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', value: stats.currentValue, isUser: true },
    { name: '–ê–ª–µ–∫—Å–µ–π –ö.', value: stats.averageValueAmongFriends + 15 },
    { name: '–ú–∞—Ä–∏—è –°.', value: stats.averageValueAmongFriends + 8 },
    { name: '–ò–≥–æ—Ä—å –í.', value: stats.averageValueAmongFriends - 5 },
    { name: '–°—Ä–µ–¥–Ω–∏–π', value: stats.averageValueAmongFriends, isAverage: true }
  ].sort((a, b) => b.value - a.value);

  const maxValue = Math.max(...friendsComparison.map(f => f.value));

  const getTrendIcon = (trend: 'rising' | 'falling' | 'stable', size = 12) => {
    switch (trend) {
      case 'rising': 
        return <ArrowUp size={size} className="text-emerald-400" />;
      case 'falling': 
        return <ArrowDown size={size} className="text-red-400" />;
      default: 
        return <Minus size={size} className="text-gray-400" />;
    }
  };

  const getSuperpowerTrendIcon = (trend: 'up' | 'down' | 'stable') => {
    switch (trend) {
      case 'up': 
        return <ArrowUp size={12} className="text-emerald-400" />;
      case 'down': 
        return <ArrowDown size={12} className="text-red-400" />;
      default: 
        return <Minus size={12} className="text-gray-400" />;
    }
  };

  const getMomentumIcon = () => {
    switch (stats.superpowerMomentum) {
      case 'heating_up':
        return <Flame size={14} className="text-orange-400" />;
      case 'cooling_down':
        return <Activity size={14} className="text-blue-400" />;
      default:
        return <BarChart3 size={14} className="text-gray-400" />;
    }
  };

  const getMomentumText = () => {
    switch (stats.superpowerMomentum) {
      case 'heating_up':
        return '–ù–∞–±–∏—Ä–∞–µ—Ç –æ–±–æ—Ä–æ—Ç—ã';
      case 'cooling_down':
        return '–ó–∞–º–µ–¥–ª—è–µ—Ç—Å—è';
      default:
        return '–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç–µ–º–ø';
    }
  };

  const getMomentumColor = () => {
    switch (stats.superpowerMomentum) {
      case 'heating_up':
        return 'from-orange-500/10 to-red-500/10 border-orange-400/30';
      case 'cooling_down':
        return 'from-blue-500/10 to-cyan-500/10 border-blue-400/30';
      default:
        return 'from-gray-500/10 to-slate-500/10 border-gray-400/30';
    }
  };

  const getPersonalizedRecommendation = () => {
    // –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if (stats.rankAmongUserSuperpowers === 1) {
      return `${superpowerName} - –≤–∞—à–∞ —Ç–æ–ø —Å—É–ø–µ—Ä—Å–∏–ª–∞! –°—Ç–∞–Ω—å—Ç–µ –º–µ–Ω—Ç–æ—Ä–æ–º –¥–ª—è –¥—Ä—É–∑–µ–π —Å ${stats.friendsWithSameSuperpower} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.`;
    }
    
    if (stats.userValueVsFriends === 'above' && stats.uniquenessScore > 70) {
      return `–í—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏! –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ "${superpowerName}".`;
    }
    
    if (stats.superpowerMomentum === 'heating_up') {
      return `–°—É–ø–µ—Ä—Å–∏–ª–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç –æ–±–æ—Ä–æ—Ç—ã! –°–∞–º–æ–µ –≤—Ä–µ–º—è —É–¥–≤–æ–∏—Ç—å —É—Å–∏–ª–∏—è - —Ç—Ä–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É.`;
    }
    
    if (stats.userValueVsFriends === 'below') {
      return `–ò–∑—É—á–∏—Ç–µ –æ–ø—ã—Ç –ª–∏–¥–µ—Ä–æ–≤ –≤ "${superpowerName}". –í–∞—à –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ ${stats.growthPotential}% –≥–æ–≤–æ—Ä–∏—Ç –æ –±–æ–ª—å—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö!`;
    }
    
    if (stats.weeklyGrowth < 0) {
      return `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ ${stats.peakActivityTime} - –≤–∞—à–µ –≤—Ä–µ–º—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.`;
    }
    
    return `–†–∞–∑–≤–∏–≤–∞–π—Ç–µ "${superpowerName}" –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ. –£ –≤–∞—Å –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ä–æ—Å—Ç–∞!`;
  };

  const getUserVsFriendsColor = () => {
    switch (stats.userValueVsFriends) {
      case 'above': return 'text-emerald-400';
      case 'below': return 'text-red-400';
      default: return 'text-yellow-400';
    }
  };

  const getUserVsFriendsText = () => {
    switch (stats.userValueVsFriends) {
      case 'above': return '–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ';
      case 'below': return '–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ';
      default: return '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å';
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.4 }}
      className="sticky top-6 w-full max-w-md mx-auto lg:mx-0"
    >
      {/* –ì–ª–∞–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ - —Å–ø–æ–∫–æ–π–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
      <div className="relative">
        <div className="relative backdrop-blur-xl bg-white/5 border border-white/10 rounded-2xl p-5">
          
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π */}
          <div className="relative flex items-center gap-2 mb-4">
            <h3 className="text-white/90 font-medium text-sm">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h3>
            <span className="text-white/40 text-sm">{superpowerEmoji} {superpowerName}</span>
          </div>

          {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å–ø–æ–∫–æ–π–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
          <div className="relative grid grid-cols-2 gap-2 mb-4">
            <div className="bg-white/5 border border-white/10 rounded-lg p-3 text-center">
              <div className="flex items-center justify-center gap-1 mb-1">
                <Crown size={12} className="text-purple-400" />
                <span className="text-white font-medium text-sm">#{stats.rankAmongUserSuperpowers}</span>
              </div>
              <span className="text-white/50 text-xs">–∏–∑ {stats.totalUserSuperpowers}</span>
            </div>
            
            <div className="bg-white/5 border border-white/10 rounded-lg p-3 text-center">
              <div className="flex items-center justify-center gap-1 mb-1">
                {getMomentumIcon()}
                <span className="text-white font-medium text-xs">{stats.weeklyGrowth >= 0 ? '+' : ''}{stats.weeklyGrowth}%</span>
              </div>
              <span className="text-white/50 text-xs">{getMomentumText()}</span>
            </div>
          </div>

          {/* –†–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö —Å—É–ø–µ—Ä—Å–∏–ª - —Å–ø–æ–∫–æ–π–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
          <div className="relative mb-4">
            <h4 className="text-white/70 text-xs mb-2 flex items-center gap-1.5">
              <Trophy size={12} className="text-yellow-400" />
              –í–∞—à —Ç–æ–ø —Å—É–ø–µ—Ä—Å–∏–ª
            </h4>
            <div className="space-y-1.5">
              {personalSuperpowerRanking.slice(0, 4).map((superpower, index) => (
                <div
                  key={superpower.name}
                  className={`flex items-center justify-between p-2 rounded-lg border transition-all duration-200 ${
                    superpower.current 
                      ? 'bg-white/10 border-white/20' 
                      : 'bg-white/5 border-white/10 hover:bg-white/8'
                  }`}
                >
                  <div className="flex items-center gap-2">
                    <div className="flex items-center gap-1">
                      <span className="text-xs text-white/40 w-4">#{index + 1}</span>
                      <span className="text-base">{superpower.emoji}</span>
                    </div>
                    <span className={`text-sm ${superpower.current ? 'text-white' : 'text-white/60'}`}>
                      {superpower.name}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className={`text-sm ${superpower.current ? 'text-white' : 'text-white/60'}`}>
                      {superpower.value}
                    </span>
                    <div className="flex items-center gap-1">
                      {getSuperpowerTrendIcon(superpower.trend)}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ - —Å–ø–æ–∫–æ–π–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
          <div className="relative mb-4">
            <h4 className="text-white/70 text-xs mb-2 flex items-center gap-1.5">
              <Brain size={12} className="text-cyan-400" />
              –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –∫—Ä—É–≥—É –¥—Ä—É–∑–µ–π
            </h4>
            
            {/* –î–≤–µ –º–∏–Ω–∏-–∫–∞—Ä—Ç–æ—á–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ */}
            <div className="grid grid-cols-2 gap-2 mb-2">
              <div className="bg-white/5 border border-white/10 rounded-lg p-2.5 text-center">
                <div className="text-emerald-400 font-medium text-base">{stats.strengthInCircle}%</div>
                <div className="text-white/50 text-xs">–í–ª–∏—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
              </div>
              
              <div className="bg-white/5 border border-white/10 rounded-lg p-2.5 text-center">
                <div className="text-orange-400 font-medium text-base">{stats.uniquenessScore}%</div>
                <div className="text-white/50 text-xs">–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å</div>
              </div>
            </div>

            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥—Ä—É–∑—å—è–º–∏ - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π */}
            <div className="bg-white/10 rounded-full h-1.5 overflow-hidden relative">
              <div 
                className="h-full bg-purple-500/60 rounded-full transition-all duration-500"
                style={{ width: `${((stats.currentValue - 40) / 60) * 100}%` }}
              />
            </div>
            
            <div className="flex justify-between text-xs text-white/50 mt-1">
              <span>–°—Ä–µ–¥–Ω–∏–π: {stats.averageValueAmongFriends}</span>
              <span className={getUserVsFriendsColor()}>
                {stats.userValueVsFriends === 'above' ? '+' : stats.userValueVsFriends === 'below' ? '-' : '¬±'}
                {Math.abs(stats.currentValue - stats.averageValueAmongFriends)}
              </span>
            </div>
          </div>

          {/* –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - —Å–ø–æ–∫–æ–π–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
          <div className="relative grid grid-cols-2 gap-2 mb-3">
            <div className="flex items-center gap-2 p-2 rounded-lg bg-white/5 border border-white/10">
              <Star size={12} className="text-emerald-400" />
              <div>
                <div className="text-white text-xs">{stats.growthPotential}%</div>
                <div className="text-white/50 text-xs">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª</div>
              </div>
            </div>
            
            <div className="flex items-center gap-2 p-2 rounded-lg bg-white/5 border border-white/10">
              <Activity size={12} className="text-indigo-400" />
              <div>
                <div className="text-white text-xs">{stats.peakActivityTime}</div>
                <div className="text-white/50 text-xs">–ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</div>
              </div>
            </div>
          </div>

          {/* –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è - —Å–ø–æ–∫–æ–π–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
          <div className="relative p-3 rounded-lg bg-white/5 border border-white/10">
            <div className="flex items-center gap-1.5 mb-1.5">
              <Zap size={12} className="text-indigo-400" />
              <span className="text-white/70 text-xs">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</span>
            </div>
            <span className="text-white/80 text-xs leading-relaxed">
              {getPersonalizedRecommendation()}
            </span>
          </div>
        </div>
      </div>
    </motion.div>
  );
}