import React, { useState, useRef } from 'react';
import { ArrowLeft, Camera, Mail, MessageCircle, Plus, X, Sparkles, Share2, Copy, Eye } from 'lucide-react';
import { motion, AnimatePresence } from 'motion/react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Card } from './ui/card';
import { Badge } from './ui/badge';
import { Textarea } from './ui/textarea';
import { toast } from 'sonner@2.0.3';
import { ImageWithFallback } from './figma/ImageWithFallback';

interface CreateValueMapScreenProps {
  onBack: () => void;
  availableSuperpowers?: Array<{
    name: string;
    emoji: string;
  }>;
}

interface NewUserData {
  name: string;
  contact: string;
  contactType: 'telegram' | 'email';
  avatar: string;
  selectedSuperpowers: Array<{
    name: string;
    emoji: string;
    estimatedValue: number;
    reason: string;
  }>;
}

export function CreateValueMapScreen({ onBack }: CreateValueMapScreenProps) {
  const [step, setStep] = useState<'basic' | 'superpowers' | 'preview'>('basic');
  const [newUser, setNewUser] = useState<NewUserData>({
    name: '',
    contact: '',
    contactType: 'telegram',
    avatar: '',
    selectedSuperpowers: []
  });
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isCreatingLink, setIsCreatingLink] = useState(false);
  const [createdLink, setCreatedLink] = useState<string | null>(null);
  const [showCustomSuperpowerForm, setShowCustomSuperpowerForm] = useState(false);
  const [customSuperpower, setCustomSuperpower] = useState({ name: '', emoji: '' });
  const [expandedCategories, setExpandedCategories] = useState<Record<string, boolean>>({});

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—É–ø–µ—Ä—Å–∏–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º Bliq —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
  const categorizedSuperpowers = {
    'üß† Mind': {
      description: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç, –º—ã—à–ª–µ–Ω–∏–µ',
      superpowers: [
        { name: '–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å', emoji: 'üß†' },
        { name: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', emoji: 'üíª' },
        { name: '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ', emoji: 'üéØ' },
        { name: '–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º', emoji: 'üí™' },
        { name: '–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏', emoji: 'üí°' },
        { name: '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ', emoji: 'üìä' },
      ]
    },
    'üíú Soul': {
      description: '–ß—É–≤—Å—Ç–≤–∞, —ç–º–ø–∞—Ç–∏—è, —Ü–µ–Ω–Ω–æ—Å—Ç–∏',
      superpowers: [
        { name: '–≠–º–ø–∞—Ç–∏—è', emoji: 'üíñ' },
        { name: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', emoji: 'üíñ' },
        { name: '–•–∞—Ä–∏–∑–º–∞', emoji: 'üëë' },
        { name: '–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ', emoji: 'üß≠' },
        { name: '–ü—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è', emoji: 'üé§' },
        { name: '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö', emoji: '‚ú®' },
      ]
    },
    'üé® Style': {
      description: '–≠—Å—Ç–µ—Ç–∏–∫–∞, —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –≤–∫—É—Å',
      superpowers: [
        { name: '–î–∏–∑–∞–π–Ω', emoji: 'üé®' },
        { name: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', emoji: 'üì∏' },
        { name: '–ö—Ä—É—Ç–æ–π —Å—Ç–∏–ª—å', emoji: '‚ùÑÔ∏è' },
        { name: '–ú—É–∑—ã–∫–∞', emoji: 'üéµ' },
        { name: '–ú–æ–¥–∞', emoji: 'üëó' },
        { name: '–í–∏–∑—É–∞–ª—å–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ', emoji: 'üñºÔ∏è' },
      ]
    },
    '‚ö° Drive': {
      description: '–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞, –ª–∏–¥–µ—Ä—Å—Ç–≤–æ, –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥',
      superpowers: [
        { name: '–õ–∏–¥–µ—Ä—Å—Ç–≤–æ', emoji: '‚≠ê' },
        { name: '–≠–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å', emoji: '‚ö°' },
        { name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', emoji: 'üìä' },
        { name: '–ü—Ä–æ–¥–∞–∂–∏', emoji: 'üéØ' },
        { name: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ', emoji: 'üöÄ' },
        { name: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è', emoji: 'üî•' },
      ]
    },
    'üë• Crew': {
      description: '–ö–æ–º–∞–Ω–¥–∞, —Å–≤—è–∑–∏, –≤–ª–∏—è–Ω–∏–µ',
      superpowers: [
        { name: '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞', emoji: 'ü§ù' },
        { name: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏', emoji: 'üí¨' },
        { name: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', emoji: 'üìã' },
        { name: '–ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥', emoji: 'üåê' },
        { name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª—é–¥—å–º–∏', emoji: 'üë•' },
      ]
    },
    'üí™ Body': {
      description: '–≠–Ω–µ—Ä–≥–∏—è, –∑–¥–æ—Ä–æ–≤—å–µ, –¥–∏–Ω–∞–º–∏–∫–∞',
      superpowers: [
        { name: '–°–ø–æ—Ä—Ç', emoji: 'üèÉ‚Äç‚ôÄÔ∏è' },
        { name: '–¢–∞–Ω—Ü—ã', emoji: 'üíÉ' },
        { name: '–ö—É–ª–∏–Ω–∞—Ä–∏—è', emoji: 'üë®‚Äçüç≥' },
        { name: '–§–∏—Ç–Ω–µ—Å', emoji: 'üí™' },
        { name: '–ô–æ–≥–∞', emoji: 'üßò‚Äç‚ôÄÔ∏è' },
      ]
    },
    'üåä Flow': {
      description: '–≠–Ω–µ—Ä–≥–∏—è, —Å—Ç–∏–ª—å, –≤–∞–π–±',
      superpowers: [
        { name: '–ú–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ', emoji: 'üí¨' },
        { name: '–ö–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', emoji: 'üì±' },
        { name: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –≤–∞–π–±', emoji: 'üåä' },
        { name: '–ì–∏–±–∫–æ—Å—Ç—å –º—ã—à–ª–µ–Ω–∏—è', emoji: 'üåÄ' },
      ]
    }
  };

  const handleBasicInfoNext = () => {
    if (!newUser.name.trim() || !newUser.contact.trim()) {
      toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç');
      return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if (newUser.contactType === 'telegram') {
      // Telegram username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _
      const telegramRegex = /^@?[a-zA-Z0-9_]{5,32}$/;
      const cleanedUsername = newUser.contact.startsWith('@') ? newUser.contact : `@${newUser.contact}`;
      if (!telegramRegex.test(cleanedUsername)) {
        toast.error('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram username (5-32 —Å–∏–º–≤–æ–ª–∞, –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _)');
        return;
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
      setNewUser(prev => ({ ...prev, contact: cleanedUsername }));
    } else if (newUser.contactType === 'email') {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(newUser.contact)) {
        toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
        return;
      }
    }
    
    setStep('superpowers');
  };

  const handleAddSuperpower = (superpower: { name: string; emoji: string }) => {
    if (newUser.selectedSuperpowers.find(sp => sp.name === superpower.name)) {
      toast.error('–≠—Ç–∞ —Å—É–ø–µ—Ä—Å–∏–ª–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
      return;
    }
    
    setNewUser(prev => ({
      ...prev,
      selectedSuperpowers: [...prev.selectedSuperpowers, {
        ...superpower,
        estimatedValue: 70,
        reason: ''
      }]
    }));
  };

  const handleRemoveSuperpower = (name: string) => {
    setNewUser(prev => ({
      ...prev,
      selectedSuperpowers: prev.selectedSuperpowers.filter(sp => sp.name !== name)
    }));
  };

  const handleUpdateSuperpower = (name: string, field: 'estimatedValue' | 'reason', value: number | string) => {
    setNewUser(prev => ({
      ...prev,
      selectedSuperpowers: prev.selectedSuperpowers.map(sp => 
        sp.name === name ? { ...sp, [field]: value } : sp
      )
    }));
  };

  const handleCreateInvite = async () => {
    if (newUser.selectedSuperpowers.length === 0) {
      toast.error('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—É–ø–µ—Ä—Å–∏–ª—É');
      return;
    }

    setIsCreatingLink(true);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const inviteId = Math.random().toString(36).substring(2, 15);
    const link = `https://bliq.app/invite/${inviteId}`;
    setCreatedLink(link);
    setIsCreatingLink(false);
    
    toast.success('–ö–∞—Ä—Ç–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∞! üéâ');
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
      if (!file.type.startsWith('image/')) {
        toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (fileInputRef.current) {
          fileInputRef.current.value = '';
        }
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
      if (file.size > 5 * 1024 * 1024) {
        toast.error('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (fileInputRef.current) {
          fileInputRef.current.value = '';
        }
        return;
      }

      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ URL –µ—Å–ª–∏ –æ–Ω –±—ã–ª
      if (newUser.avatar && newUser.avatar.startsWith('blob:')) {
        URL.revokeObjectURL(newUser.avatar);
      }

      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      const imageUrl = URL.createObjectURL(file);
      setNewUser(prev => ({ ...prev, avatar: imageUrl }));
      toast.success('–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! üì∏');
    }
  };

  const handleSelectPhoto = () => {
    fileInputRef.current?.click();
  };

  const handleAddCustomSuperpower = () => {
    if (!customSuperpower.name.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–ø–µ—Ä—Å–∏–ª—ã');
      return;
    }
    
    if (!customSuperpower.emoji.trim()) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—É–ø–µ—Ä—Å–∏–ª—ã');
      return;
    }

    if (newUser.selectedSuperpowers.find(sp => sp.name === customSuperpower.name)) {
      toast.error('–≠—Ç–∞ —Å—É–ø–µ—Ä—Å–∏–ª–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
      return;
    }

    setNewUser(prev => ({
      ...prev,
      selectedSuperpowers: [...prev.selectedSuperpowers, {
        ...customSuperpower,
        estimatedValue: 70,
        reason: ''
      }]
    }));

    setCustomSuperpower({ name: '', emoji: '' });
    setShowCustomSuperpowerForm(false);
    toast.success('–ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—É–ø–µ—Ä—Å–∏–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! ‚ú®');
  };

  const toggleCategory = (category: string) => {
    setExpandedCategories(prev => ({
      ...prev,
      [category]: !prev[category]
    }));
  };

  const handleCopyLink = () => {
    if (createdLink) {
      navigator.clipboard.writeText(createdLink);
      toast.success('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! üîó');
    }
  };

  const renderBasicInfo = () => (
    <div className="space-y-8">
      <div className="text-center space-y-3">
        <h1 className="text-2xl font-bold text-white">–°–æ–∑–¥–∞–π –∏–Ω–≤–∞–π—Ç –∫–∞—Ä—Ç—É</h1>
        <p className="text-white/70 text-base leading-relaxed max-w-sm mx-auto">
          –¢–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ —Å–æ–∑–¥–∞–¥—É—Ç –æ—Å–Ω–æ–≤—É –∫–∞—Ä—Ç—ã —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞
        </p>
      </div>

      {/* Avatar Selection */}
      <div className="flex flex-col items-center space-y-5">
        <div className="relative">
          {newUser.avatar ? (
            <div className="relative">
              <img
                src={newUser.avatar}
                alt="Avatar"
                className="w-28 h-28 rounded-full object-cover border-3 border-purple-400/50 shadow-lg"
              />
              <Button
                size="icon"
                variant="ghost"
                onClick={() => {
                  // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç URL –æ–±—ä–µ–∫—Ç–∞
                  if (newUser.avatar.startsWith('blob:')) {
                    URL.revokeObjectURL(newUser.avatar);
                  }
                  setNewUser(prev => ({ ...prev, avatar: '' }));
                  // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º input, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª —Å–Ω–æ–≤–∞
                  if (fileInputRef.current) {
                    fileInputRef.current.value = '';
                  }
                }}
                className="absolute -top-2 -right-2 w-7 h-7 rounded-full bg-red-500 hover:bg-red-600 text-white shadow-md"
              >
                <X size={14} />
              </Button>
            </div>
          ) : (
            <div className="w-28 h-28 rounded-full bg-gradient-to-br from-purple-500/20 to-pink-500/15 border-3 border-purple-400/30 flex items-center justify-center shadow-lg">
              <Camera className="h-9 w-9 text-purple-300" />
            </div>
          )}
        </div>
        
        {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ */}
        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          onChange={handleImageUpload}
          className="hidden"
        />
        
        <Button
          variant="outline"
          onClick={handleSelectPhoto}
          className="border-purple-400/30 hover:border-purple-400/50 text-white hover:text-white bg-white/5 hover:bg-white/10 px-6 py-2 rounded-xl"
        >
          <Camera className="h-4 w-4 mr-2" />
          {newUser.avatar ? '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ' : '–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ'}
        </Button>
      </div>

      {/* Basic Info Form */}
      <div className="space-y-6">
        <div className="space-y-3">
          <Label htmlFor="name" className="text-white font-medium">–ö–∞–∫ –∑–æ–≤—É—Ç? *</Label>
          <Input
            id="name"
            placeholder="–ò–º—è –§–∞–º–∏–ª–∏—è"
            value={newUser.name}
            onChange={(e) => setNewUser(prev => ({ ...prev, name: e.target.value }))}
            className="bg-white/10 border-white/20 text-white placeholder:text-white/50 h-12 rounded-xl"
          />
        </div>

        <div className="space-y-3">
          <Label htmlFor="contact" className="text-white font-medium">–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è *</Label>
          <div className="flex gap-3">
            <div className="flex rounded-xl overflow-hidden border border-white/20">
              <Button
                type="button"
                variant={newUser.contactType === 'telegram' ? 'default' : 'ghost'}
                size="sm"
                onClick={() => setNewUser(prev => ({ ...prev, contactType: 'telegram' }))}
                className={`h-12 px-4 rounded-none border-0 ${
                  newUser.contactType === 'telegram' 
                    ? 'bg-blue-500 hover:bg-blue-600 text-white' 
                    : 'bg-white/5 hover:bg-white/10 text-white/70'
                }`}
              >
                <svg className="w-7 h-7" viewBox="0 0 240 240" fill="currentColor">
                  <path d="M93.832 128.544c-3.84-1.536-7.68-3.072-11.52-4.608 27.648-11.52 55.296-23.04 82.944-34.56 9.216-3.84 18.432-7.68 27.648-11.52.768-.768.768-2.304 0-3.072-1.536 0-3.072.768-4.608 1.536-30.72 12.288-61.44 24.576-92.16 36.864-4.608 1.536-9.216 3.072-13.824 4.608-.768.768-.768 2.304 0 3.072 3.84 1.536 7.68 3.072 11.52 4.608z"/>
                  <path d="M32.064 96c1.536-1.536 3.84-2.304 6.144-2.304 66.048-27.648 132.096-55.296 198.144-82.944C242.496 8.448 248.64 8.448 254.784 10.752c2.304 0 4.608 1.536 6.144 3.072 1.536 1.536 2.304 3.84 2.304 6.144-.768 3.84-1.536 7.68-2.304 11.52L240 192c-1.536 11.52-6.144 22.272-13.824 30.72-3.84 4.608-9.216 7.68-15.36 9.216-6.144 1.536-12.288.768-17.664-2.304-12.288-6.912-24.576-13.824-36.864-20.736-23.04-12.288-46.08-24.576-69.12-36.864-3.84-1.536-6.912-4.608-8.448-8.448-.768-3.072 0-6.144 2.304-8.448 15.36-16.128 30.72-32.256 46.08-48.384 3.072-3.072 6.144-6.144 9.216-9.216 1.536-1.536 1.536-3.84 0-5.376-1.536-1.536-3.84-1.536-5.376 0-2.304 2.304-4.608 4.608-6.912 6.912-20.736 20.736-41.472 41.472-62.208 62.208-3.84 3.84-8.448 6.912-13.824 8.448-5.376 1.536-11.52 1.536-16.896-.768-18.432-6.144-36.864-12.288-55.296-18.432-3.84-1.536-6.912-4.608-8.448-8.448C21.312 103.68 25.152 98.304 32.064 96z"/>
                </svg>
              </Button>
              <Button
                type="button"
                variant={newUser.contactType === 'email' ? 'default' : 'ghost'}
                size="sm"
                onClick={() => setNewUser(prev => ({ ...prev, contactType: 'email' }))}
                className={`h-12 px-4 rounded-none border-0 ${
                  newUser.contactType === 'email' 
                    ? 'bg-purple-600 hover:bg-purple-700 text-white' 
                    : 'bg-white/5 hover:bg-white/10 text-white/70'
                }`}
              >
                <Mail className="h-6 w-6" />
              </Button>
            </div>
            <Input
              id="contact"
              placeholder={newUser.contactType === 'telegram' ? '@username –∏–ª–∏ username' : 'email@example.com'}
              value={newUser.contact}
              onChange={(e) => setNewUser(prev => ({ ...prev, contact: e.target.value }))}
              className="flex-1 bg-white/10 border-white/20 text-white placeholder:text-white/50 h-12 rounded-xl"
            />
          </div>
          <p className="text-sm text-white/60 mt-2 leading-relaxed">
            {newUser.contactType === 'telegram' 
              ? 'Telegram username –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—Å—è @)' 
              : 'Email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—É —Ü–µ–Ω–Ω–æ—Å—Ç–∏'
            }
          </p>
        </div>
      </div>

      <Button 
        onClick={handleBasicInfoNext}
        className="w-full bg-purple-600 hover:bg-purple-700 h-12 rounded-xl font-medium text-base mt-8"
        disabled={!newUser.name.trim() || !newUser.contact.trim()}
      >
        –î–∞–ª–µ–µ: –í—ã–±—Ä–∞—Ç—å —Å—É–ø–µ—Ä—Å–∏–ª—ã
        <ArrowLeft className="h-4 w-4 ml-2 rotate-180" />
      </Button>
    </div>
  );

  const renderSuperpowers = () => {
    // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É–ø–µ—Ä—Å–∏–ª –¥–ª—è —Ö–æ—Ä–æ—à–µ–π –∫–∞—Ä—Ç—ã
    const minSuperpowers = 3;
    const recommendedSuperpowers = 5;
    const selectedCount = newUser.selectedSuperpowers.length;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const getProgressColor = () => {
      if (selectedCount === 0) return 'text-white/50';
      if (selectedCount < minSuperpowers) return 'text-orange-400';
      if (selectedCount < recommendedSuperpowers) return 'text-yellow-400';
      return 'text-emerald-400';
    };
    
    const getProgressMessage = () => {
      if (selectedCount === 0) return '–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã 3 —Å—É–ø–µ—Ä—Å–∏–ª—ã';
      if (selectedCount < minSuperpowers) return `–ï—â—ë ${minSuperpowers - selectedCount} –¥–æ –º–∏–Ω–∏–º—É–º–∞`;
      if (selectedCount < recommendedSuperpowers) return `–°—É–ø–µ—Ä! –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë ${recommendedSuperpowers - selectedCount}`;
      return '–û—Ç–ª–∏—á–Ω–æ! –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ üéâ';
    };
    
    return (
      <div className="relative">
        {/* STICKY HEADER —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º - –í–°–ï–ì–î–ê –í–ò–î–ò–ú –°–í–ï–†–•–£ */}
        <div className="sticky top-0 z-40 -mx-4 px-4 pt-4 pb-4 mb-6 bg-gradient-to-b from-[#1a1b23] via-[#1a1b23] to-[#1a1b23]/95 backdrop-blur-xl border-b border-white/10 shadow-lg shadow-black/20">
          <div className="text-center space-y-3">
            <h1 className="text-2xl font-bold text-white mb-2">–ö–∞–∫–∏–µ —Å—É–ø–µ—Ä—Å–∏–ª—ã —É {newUser.name}?</h1>
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
            <div className="inline-flex items-center gap-3 px-5 py-3 rounded-full bg-gradient-to-r from-purple-500/20 to-pink-500/20 border-2 border-purple-400/40 shadow-lg shadow-purple-500/20">
              <div className="flex items-center gap-2">
                {[...Array(recommendedSuperpowers)].map((_, i) => (
                  <div
                    key={i}
                    className={`w-2.5 h-2.5 rounded-full transition-all duration-300 ${
                      i < selectedCount 
                        ? 'bg-purple-400 scale-125 shadow-lg shadow-purple-400/50' 
                        : 'bg-white/30'
                    }`}
                  />
                ))}
              </div>
              <div className="h-5 w-px bg-white/30" />
              <span className={`text-base font-bold ${getProgressColor()}`}>
                {selectedCount}/{recommendedSuperpowers}
              </span>
            </div>
            
            {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ */}
            <p className={`text-base font-medium ${getProgressColor()} transition-colors duration-300`}>
              {getProgressMessage()}
            </p>
          </div>
        </div>
        
        {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Å –æ—Ç—Å—Ç—É–ø–æ–º –¥–ª—è sticky header */}
        <div className="space-y-6">

      {/* Selected Superpowers */}
      {newUser.selectedSuperpowers.length > 0 && (
        <div className="space-y-4">
          <h3 className="text-lg font-medium text-white">–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—É–ø–µ—Ä—Å–∏–ª—ã ({newUser.selectedSuperpowers.length})</h3>
          <div className="space-y-3">
            {newUser.selectedSuperpowers.map((sp, index) => (
              <motion.div
                key={sp.name}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="glass-card p-4 rounded-xl"
              >
                <div className="flex items-start justify-between mb-3">
                  <div className="flex items-center gap-3">
                    <span className="text-2xl">{sp.emoji}</span>
                    <div>
                      <h4 className="font-medium text-white">{sp.name}</h4>
                      <p className="text-sm text-white/60">–û—Ü–µ–Ω–∫–∞: {sp.estimatedValue}%</p>
                    </div>
                  </div>
                  <Button
                    size="icon"
                    variant="ghost"
                    onClick={() => handleRemoveSuperpower(sp.name)}
                    className="text-red-400 hover:text-red-300 hover:bg-red-500/20"
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
                
                {/* Estimated Value Slider */}
                <div className="mb-3">
                  <Label className="text-sm text-white/80">–£—Ä–æ–≤–µ–Ω—å (–ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é)</Label>
                  <div className="flex items-center gap-3 mt-1">
                    <input
                      type="range"
                      min="1"
                      max="100"
                      value={sp.estimatedValue}
                      onChange={(e) => handleUpdateSuperpower(sp.name, 'estimatedValue', parseInt(e.target.value))}
                      className="flex-1 h-2 bg-white/20 rounded-lg appearance-none cursor-pointer"
                    />
                    <span className="text-sm text-white font-medium w-10">{sp.estimatedValue}%</span>
                  </div>
                </div>

                {/* Reason */}
                <div>
                  <Label className="text-sm text-white/80">–ü–æ—á–µ–º—É —Ç—ã —Ç–∞–∫ —Å—á–∏—Ç–∞–µ—à—å? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
                  <Textarea
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–í—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö'"
                    value={sp.reason}
                    onChange={(e) => handleUpdateSuperpower(sp.name, 'reason', e.target.value)}
                    className="mt-1 bg-white/10 border-white/20 text-white placeholder:text-white/50 resize-none h-16"
                  />
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      )}

      {/* Available Superpowers by Categories */}
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-medium text-white">–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–ø–µ—Ä—Å–∏–ª—ã</h3>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => {
              const allCategories = Object.keys(categorizedSuperpowers);
              const allExpanded = allCategories.every(cat => expandedCategories[cat]);
              const newState = allCategories.reduce((acc, cat) => ({
                ...acc,
                [cat]: !allExpanded
              }), {});
              setExpandedCategories(newState);
            }}
            className="text-white/60 hover:text-white text-xs"
          >
            {Object.values(expandedCategories).some(Boolean) ? '–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ' : '–†–∞—Å–∫—Ä—ã—Ç—å –≤—Å–µ'}
          </Button>
        </div>

        {/* Custom Superpower Form */}
        {showCustomSuperpowerForm && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="glass-card p-4 rounded-xl space-y-4"
          >
            <div className="flex items-center justify-between">
              <h4 className="font-medium text-white">–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Å—É–ø–µ—Ä—Å–∏–ª—É</h4>
              <Button
                size="icon"
                variant="ghost"
                onClick={() => {
                  setShowCustomSuperpowerForm(false);
                  setCustomSuperpower({ name: '', emoji: '' });
                }}
                className="text-white/60 hover:text-white"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
            
            <div className="grid grid-cols-1 gap-3">
              <div>
                <Label className="text-sm text-white/80">–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–ø–µ—Ä—Å–∏–ª—ã</Label>
                <Input
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"
                  value={customSuperpower.name}
                  onChange={(e) => setCustomSuperpower(prev => ({ ...prev, name: e.target.value }))}
                  className="mt-1 bg-white/10 border-white/20 text-white placeholder:text-white/50"
                />
              </div>
              
              <div>
                <Label className="text-sm text-white/80">–≠–º–æ–¥–∑–∏</Label>
                <div className="flex gap-2 mt-1">
                  <Input
                    placeholder="üé®"
                    value={customSuperpower.emoji}
                    onChange={(e) => setCustomSuperpower(prev => ({ ...prev, emoji: e.target.value }))}
                    className="w-16 bg-white/10 border-white/20 text-white text-center"
                    maxLength={2}
                  />
                  <div className="flex gap-1 flex-wrap">
                    {['üé®', 'üí°', 'üöÄ', 'üíé', 'üî•', '‚ö°', 'üåü', '‚ú®'].map(emoji => (
                      <button
                        key={emoji}
                        type="button"
                        onClick={() => setCustomSuperpower(prev => ({ ...prev, emoji }))}
                        className="w-8 h-8 flex items-center justify-center rounded-lg bg-white/10 hover:bg-white/20 transition-colors text-sm"
                      >
                        {emoji}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  setShowCustomSuperpowerForm(false);
                  setCustomSuperpower({ name: '', emoji: '' });
                }}
                className="flex-1 border-white/20 text-white hover:bg-white/10"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button
                size="sm"
                onClick={handleAddCustomSuperpower}
                className="flex-1 bg-purple-600 hover:bg-purple-700"
                disabled={!customSuperpower.name.trim() || !customSuperpower.emoji.trim()}
              >
                –î–æ–±–∞–≤–∏—Ç—å
              </Button>
            </div>
          </motion.div>
        )}

        {/* Categorized Superpowers - Accordion Style */}
        <div className="space-y-3">
          {Object.entries(categorizedSuperpowers).map(([category, categoryData]) => {
            const availableInCategory = categoryData.superpowers.filter(
              sp => !newUser.selectedSuperpowers.find(selected => selected.name === sp.name)
            );
            
            if (availableInCategory.length === 0) return null;
            
            const isExpanded = expandedCategories[category];
            
            return (
              <div key={category} className="glass-card rounded-xl overflow-hidden">
                {/* Category Header */}
                <motion.button
                  onClick={() => toggleCategory(category)}
                  className="w-full p-4 text-left hover:bg-white/5 transition-colors flex items-center justify-between group"
                  whileHover={{ scale: 1.01 }}
                  whileTap={{ scale: 0.99 }}
                >
                  <div className="flex items-center gap-3">
                    <span className="text-2xl">{category.split(' ')[0]}</span>
                    <div>
                      <h4 className="font-medium text-white group-hover:text-purple-200 transition-colors">
                        {categoryData.description}
                      </h4>
                      <p className="text-sm text-white/60 mt-0.5">
                        {category.split(' ').slice(1).join(' ')}
                      </p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    <Badge variant="outline" className="text-xs border-purple-400/30 text-purple-300">
                      {availableInCategory.length}
                    </Badge>
                    <motion.div
                      animate={{ rotate: isExpanded ? 180 : 0 }}
                      transition={{ duration: 0.2 }}
                    >
                      <svg className="w-5 h-5 text-white/60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                      </svg>
                    </motion.div>
                  </div>
                </motion.button>

                {/* Category Content */}
                <AnimatePresence>
                  {isExpanded && (
                    <motion.div
                      initial={{ height: 0, opacity: 0 }}
                      animate={{ height: 'auto', opacity: 1 }}
                      exit={{ height: 0, opacity: 0 }}
                      transition={{ duration: 0.3, ease: 'easeInOut' }}
                      className="overflow-hidden"
                    >
                      <div className="px-4 pb-4 border-t border-white/10">
                        <div className="grid grid-cols-2 gap-2 mt-3">
                          {availableInCategory.map((sp) => (
                            <motion.button
                              key={sp.name}
                              initial={{ opacity: 0, y: 10 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: 0.1 }}
                              whileHover={{ scale: 1.02 }}
                              whileTap={{ scale: 0.98 }}
                              onClick={() => handleAddSuperpower(sp)}
                              className="bg-white/10 p-3 rounded-lg text-left hover:bg-white/15 transition-all duration-200 group border border-transparent hover:border-purple-400/30"
                            >
                              <div className="flex items-center gap-2">
                                <span className="text-lg group-hover:scale-110 transition-transform">{sp.emoji}</span>
                                <span className="text-white text-sm font-medium truncate">{sp.name}</span>
                                <Plus className="h-3 w-3 text-purple-300 ml-auto opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0" />
                              </div>
                            </motion.button>
                          ))}
                        </div>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            );
          })}
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —Å—É–ø–µ—Ä—Å–∏–ª—É - –Ø–†–ö–ê–Ø –ò –ó–ê–ú–ï–¢–ù–ê–Ø */}
        <div className="pt-4">
          <Button
            size="default"
            onClick={() => setShowCustomSuperpowerForm(true)}
            className="w-full relative overflow-hidden group transition-all duration-300 bg-gradient-to-r from-purple-600 via-pink-600 to-purple-600 hover:from-purple-500 hover:via-pink-500 hover:to-purple-500 text-white border-none shadow-lg shadow-purple-500/50 hover:shadow-xl hover:shadow-pink-500/60 hover:scale-[1.02]"
          >
            <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-700" />
            <Plus className="h-5 w-5 mr-2 relative z-10 drop-shadow-glow" />
            <span className="relative z-10 font-semibold">–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —Å—É–ø–µ—Ä—Å–∏–ª—É</span>
          </Button>
        </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="flex gap-3">
        <Button 
          variant="outline"
          onClick={() => setStep('basic')}
          className="flex-1 border-white/20 text-white hover:bg-white/10"
        >
          –ù–∞–∑–∞–¥
        </Button>
        <Button 
          onClick={() => setStep('preview')}
          className="flex-1 bg-purple-600 hover:bg-purple-700"
          disabled={newUser.selectedSuperpowers.length < 3}
        >
          –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç—ã
        </Button>
      </div>
    </div>
  );
};

  const renderPreview = () => (
    <div className="space-y-6">
      <div className="text-center">
        <h1 className="text-2xl font-bold text-white mb-2">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç—ã —Ü–µ–Ω–Ω–æ—Å—Ç–∏</h1>
        <p className="text-white/70">–¢–∞–∫ —É–≤–∏–¥–∏—Ç —Å–≤–æ—é –∫–∞—Ä—Ç—É {newUser.name}</p>
      </div>

      {/* Value Map Preview */}
      <Card className="glass-card p-6 space-y-6">
        {/* Header */}
        <div className="text-center space-y-4">
          <div className="relative inline-block">
            {newUser.avatar ? (
              <img
                src={newUser.avatar}
                alt={newUser.name}
                className="w-20 h-20 rounded-full object-cover border-2 border-purple-400/50 mx-auto"
              />
            ) : (
              <div className="w-20 h-20 rounded-full bg-gradient-to-br from-purple-500/20 to-pink-500/15 border-2 border-purple-400/30 flex items-center justify-center mx-auto">
                <span className="text-2xl">üë§</span>
              </div>
            )}
            <div className="absolute -bottom-1 -right-1 w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center">
              <Sparkles className="h-3 w-3 text-white" />
            </div>
          </div>
          
          <div>
            <h2 className="text-xl font-bold text-white">{newUser.name}</h2>
            <p className="text-purple-300">–ö–∞—Ä—Ç–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞</p>
          </div>
        </div>

        {/* Superpowers */}
        <div className="space-y-4">
          <h3 className="text-lg font-medium text-white text-center">–í–∞—à–∏ —Å—É–ø–µ—Ä—Å–∏–ª—ã</h3>
          <div className="space-y-3">
            {newUser.selectedSuperpowers.map((sp) => (
              <div key={sp.name} className="bg-white/10 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-3">
                    <span className="text-xl">{sp.emoji}</span>
                    <span className="font-medium text-white">{sp.name}</span>
                  </div>
                  <Badge className="bg-purple-500/20 text-purple-300 border-purple-400/30">
                    {sp.estimatedValue}%
                  </Badge>
                </div>
                {sp.reason && (
                  <p className="text-sm text-white/70 italic ml-8">"{sp.reason}"</p>
                )}
              </div>
            ))}
          </div>
        </div>
        
        {/* –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã */}
        <div className="text-center pt-4 border-t border-white/10">
          <p className="text-white/60 text-sm italic">
            üí° {newUser.name} —É–≤–∏–¥–∏—Ç –∫–Ω–æ–ø–∫—É "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ Bliq" –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
          </p>
        </div>
      </Card>

      {/* Invite Link */}
      {createdLink ? (
        <Card className="glass-card p-4">
          <div className="space-y-3">
            <div className="flex items-center gap-2">
              <Sparkles className="h-5 w-5 text-purple-400" />
              <h3 className="font-medium text-white">–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É —Ü–µ–Ω–Ω–æ—Å—Ç–∏</h3>
            </div>
            <div className="flex gap-2">
              <Input
                value={createdLink}
                readOnly
                className="bg-white/10 border-white/20 text-white"
              />
              <Button
                size="icon"
                onClick={handleCopyLink}
                className="bg-purple-600 hover:bg-purple-700"
              >
                <Copy className="h-4 w-4" />
              </Button>
            </div>
            <p className="text-xs text-white/60">
              –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É: <span className="text-purple-300">{newUser.contact}</span>
            </p>
          </div>
        </Card>
      ) : (
        <div className="flex gap-3">
          <Button 
            variant="outline"
            onClick={() => setStep('superpowers')}
            className="flex-1 border-white/20 text-white hover:bg-white/10"
          >
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          </Button>
          <Button 
            onClick={handleCreateInvite}
            disabled={isCreatingLink}
            className="flex-1 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
          >
            {isCreatingLink ? (
              <>
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                  className="mr-2"
                >
                  <Sparkles className="h-4 w-4" />
                </motion.div>
                –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É...
              </>
            ) : (
              <>
                <Share2 className="h-4 w-4 mr-2" />
                –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç
              </>
            )}
          </Button>
        </div>
      )}
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
      <div className="container mx-auto px-5 py-6 max-w-lg">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <Button
            variant="ghost"
            size="icon"
            onClick={onBack}
            className="text-white hover:bg-white/10 -ml-2"
          >
            <ArrowLeft className="h-6 w-6" />
          </Button>
          
          {/* Progress Indicator */}
          <div className="flex items-center gap-3">
            <div className={`w-3 h-3 rounded-full transition-all duration-300 ${
              step === 'basic' ? 'bg-purple-400 ring-2 ring-purple-400/30' : 'bg-white/30'
            }`} />
            <div className={`w-3 h-3 rounded-full transition-all duration-300 ${
              step === 'superpowers' ? 'bg-purple-400 ring-2 ring-purple-400/30' : 'bg-white/30'
            }`} />
            <div className={`w-3 h-3 rounded-full transition-all duration-300 ${
              step === 'preview' ? 'bg-purple-400 ring-2 ring-purple-400/30' : 'bg-white/30'
            }`} />
          </div>
          
          <div className="w-10" /> {/* Spacer */}
        </div>

        {/* Content */}
        <AnimatePresence mode="wait">
          <motion.div
            key={step}
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            transition={{ duration: 0.3, ease: "easeOut" }}
          >
            {step === 'basic' && renderBasicInfo()}
            {step === 'superpowers' && renderSuperpowers()}
            {step === 'preview' && renderPreview()}
          </motion.div>
        </AnimatePresence>
      </div>
    </div>
  );
}