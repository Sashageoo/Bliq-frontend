import React, { useState } from 'react';
import { motion } from 'motion/react';
import { ArrowLeft, ArrowRight, Building2, Sparkles, CheckCircle2 } from 'lucide-react';
import { toast } from 'sonner@2.0.3';

interface BusinessInfo {
  companyName: string;
  industry: string;
  description: string;
  selectedSuperpowers: string[];
}

interface OnboardingBusinessSetupScreenProps {
  onNext: (businessInfo: any) => void;
  onBack: () => void;
  onSkip: () => void;
}

const INDUSTRIES = [
  { name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ IT', emoji: 'üíª' },
  { name: '–§–∏–Ω–∞–Ω—Å—ã', emoji: 'üí∞' },
  { name: '–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', emoji: 'üè•' },
  { name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', emoji: 'üéì' },
  { name: '–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è', emoji: 'üõí' },
  { name: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', emoji: 'üè≠' },
  { name: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', emoji: 'üèóÔ∏è' },
  { name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞', emoji: 'üì¢' },
  { name: '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥', emoji: 'üíº' },
  { name: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', emoji: 'üè†' },
  { name: '–ú–µ–¥–∏–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', emoji: 'üé¨' },
  { name: '–î—Ä—É–≥–æ–µ', emoji: 'üè¢' }
];

// –ë–∏–∑–Ω–µ—Å-—Å—É–ø–µ—Ä—Å–∏–ª—ã (–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è 7 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞)
const BUSINESS_SUPERPOWERS = [
  { name: '–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏', emoji: 'üß†', category: 'Mind' },
  { name: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞', emoji: 'üíú', category: 'Soul' },
  { name: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤', emoji: 'üåä', category: 'Flow' },
  { name: '–ö–æ–º–∞–Ω–¥–∞ –∏ HR', emoji: 'üë•', category: 'Crew' },
  { name: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ—â—å', emoji: 'üí™', category: 'Body' },
  { name: '–î–∏–∑–∞–π–Ω –∏ UX', emoji: 'üé®', category: 'Style' },
  { name: '–ü—Ä–æ–¥–∞–∂–∏ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥', emoji: '‚ö°', category: 'Drive' },
  { name: '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å', emoji: 'ü§ù', category: 'Soul' },
  { name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ', emoji: 'üöÄ', category: 'Mind' },
  { name: '–£—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ', emoji: 'üå±', category: 'Soul' },
  { name: '–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ', emoji: 'üìà', category: 'Drive' },
  { name: '–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞', emoji: '‚≠ê', category: 'Body' }
];

export function OnboardingBusinessSetupScreen({
  onNext,
  onBack,
  onSkip
}: OnboardingBusinessSetupScreenProps) {
  const [businessInfo, setBusinessInfo] = useState<BusinessInfo>({
    companyName: '',
    industry: '',
    description: '',
    selectedSuperpowers: []
  });

  const handleInputChange = (field: keyof BusinessInfo, value: string) => {
    setBusinessInfo(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const toggleSuperpower = (superpowerName: string) => {
    setBusinessInfo(prev => {
      const current = prev.selectedSuperpowers;
      // –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ - —É–±—Ä–∞—Ç—å
      if (current.includes(superpowerName)) {
        return {
          ...prev,
          selectedSuperpowers: current.filter(name => name !== superpowerName)
        };
      }
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –º–µ–Ω–µ–µ 3 - –¥–æ–±–∞–≤–∏—Ç—å
      if (current.length < 3) {
        return {
          ...prev,
          selectedSuperpowers: [...current, superpowerName]
        };
      }
      // –ï—Å–ª–∏ —É–∂–µ 3 - –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ
      return {
        ...prev,
        selectedSuperpowers: [...current.slice(0, 2), superpowerName]
      };
    });
  };

  const handleComplete = () => {
    if (!businessInfo.companyName) {
      toast.error('–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏');
      return;
    }
    if (!businessInfo.industry) {
      toast.error('–í—ã–±–µ—Ä–∏ –æ—Ç—Ä–∞—Å–ª—å');
      return;
    }
    if (businessInfo.selectedSuperpowers.length !== 3) {
      toast.error('–í—ã–±–µ—Ä–∏ 3 –∫–ª—é—á–µ–≤—ã–µ —Å–∏–ª—ã –∫–æ–º–ø–∞–Ω–∏–∏');
      return;
    }

    // –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –±–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    onNext({
      companyName: businessInfo.companyName,
      industry: businessInfo.industry,
      description: businessInfo.description || `–ö–æ–º–ø–∞–Ω–∏—è –≤ —Å—Ñ–µ—Ä–µ: ${businessInfo.industry}`,
      founded: new Date().getFullYear().toString(),
      employees: '11-50 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
      revenue: '–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å',
      website: '',
      phone: '',
      email: ''
    });
  };

  const canContinue = 
    businessInfo.companyName.trim().length > 0 && 
    businessInfo.industry.length > 0 &&
    businessInfo.selectedSuperpowers.length === 3;

  return (
    <div className="min-h-screen bg-background relative overflow-hidden">
      {/* –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ–Ω */}
      <div className="absolute inset-0">
        <div className="absolute inset-0 bliq-energy-gradient opacity-10" />
        {[...Array(12)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 bg-blue-400/30 rounded-full"
            initial={{ 
              x: Math.random() * window.innerWidth,
              y: window.innerHeight + 100,
              scale: 0
            }}
            animate={{ 
              y: -100,
              scale: [0, 1, 0],
              opacity: [0, 1, 0]
            }}
            transition={{
              duration: 4 + Math.random() * 2,
              repeat: Infinity,
              delay: Math.random() * 4
            }}
          />
        ))}
      </div>

      <div className="relative z-10 min-h-screen flex flex-col">
        {/* –•–µ–¥–µ—Ä */}
        <div className="flex items-center justify-between p-6">
          <motion.button
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            onClick={onBack}
            className="w-10 h-10 rounded-full glass-card flex items-center justify-center text-white"
          >
            <ArrowLeft size={20} />
          </motion.button>

          <div className="text-center">
            <h1 className="font-semibold text-white">–ë–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ñ–∏–ª—å</h1>
            <p className="text-sm text-blue-200">—à–∞–≥ 5 –∏–∑ 6</p>
          </div>

          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={onSkip}
            className="text-muted-foreground hover:text-white transition-colors"
          >
            –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
          </motion.button>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="flex-1 px-6 py-4 overflow-y-auto">
          <div className="max-w-md mx-auto">
            {/* –ò–∫–æ–Ω–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ */}
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ type: "spring", bounce: 0.4, delay: 0.2 }}
              className="text-center mb-8"
            >
              <div className="w-24 h-24 rounded-full bg-gradient-to-r from-blue-400 to-orange-400 flex items-center justify-center mx-auto">
                <Building2 size={32} className="text-white" />
              </div>
              <p className="text-muted-foreground text-sm mt-2">–õ–æ–≥–æ—Ç–∏–ø (–ø–æ–∑–∂–µ)</p>
            </motion.div>

            {/* –§–æ—Ä–º–∞ */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
              className="space-y-6"
            >
              {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ */}
              <div>
                <label className="block text-white font-medium mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</label>
                <input
                  type="text"
                  value={businessInfo.companyName}
                  onChange={(e) => handleInputChange('companyName', e.target.value)}
                  placeholder="–û–û–û ¬´–ú–æ—è –∫–æ–º–ø–∞–Ω–∏—è¬ª"
                  className="w-full px-4 py-3 glass-card rounded-xl text-white placeholder-muted-foreground neon-border focus:border-primary focus:outline-none transition-colors"
                />
              </div>

              {/* –û—Ç—Ä–∞—Å–ª—å */}
              <div>
                <label className="block text-white font-medium mb-2">–û—Ç—Ä–∞—Å–ª—å</label>
                <div className="grid grid-cols-2 gap-2">
                  {INDUSTRIES.map((industry) => (
                    <motion.button
                      key={industry.name}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => handleInputChange('industry', industry.name)}
                      className={`p-3 rounded-xl border transition-all duration-300 ${
                        businessInfo.industry === industry.name
                          ? 'bg-blue-500/30 border-blue-400 text-white'
                          : 'bg-white/5 border-white/20 text-blue-200 hover:border-blue-400 hover:text-white'
                      }`}
                    >
                      <div className="flex items-center gap-2">
                        <span className="text-lg">{industry.emoji}</span>
                        <span className="text-sm font-medium">{industry.name}</span>
                      </div>
                    </motion.button>
                  ))}
                </div>
              </div>

              {/* –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */}
              <div>
                <label className="block text-white font-medium mb-2">
                  –û –∫–æ–º–ø–∞–Ω–∏–∏ <span className="text-muted-foreground text-sm">(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</span>
                </label>
                <textarea
                  value={businessInfo.description}
                  onChange={(e) => handleInputChange('description', e.target.value)}
                  placeholder="–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è..."
                  rows={3}
                  className="w-full px-4 py-3 glass-card rounded-xl text-white placeholder-muted-foreground neon-border focus:border-primary focus:outline-none transition-colors resize-none"
                />
              </div>

              {/* –í—ã–±–æ—Ä 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–∏–ª */}
              <div>
                <label className="block text-white font-medium mb-2">
                  –í—ã–±–µ—Ä–∏ 3 –∫–ª—é—á–µ–≤—ã–µ —Å–∏–ª—ã –∫–æ–º–ø–∞–Ω–∏–∏
                </label>
                <p className="text-blue-200 text-sm mb-4">
                  –≠—Ç–∏ —Å–∏–ª—ã –∫–ª–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ –æ—Ç–∑—ã–≤—ã ‚ú®
                </p>
                
                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±–æ—Ä–∞ */}
                <div className="flex gap-2 mb-4">
                  {[0, 1, 2].map((index) => (
                    <div
                      key={index}
                      className={`flex-1 h-2 rounded-full transition-all duration-300 ${
                        index < businessInfo.selectedSuperpowers.length
                          ? 'bg-gradient-to-r from-blue-400 to-orange-400'
                          : 'bg-white/10'
                      }`}
                    />
                  ))}
                </div>

                <div className="grid grid-cols-2 gap-3">
                  {BUSINESS_SUPERPOWERS.map((superpower) => {
                    const isSelected = businessInfo.selectedSuperpowers.includes(superpower.name);
                    const selectionIndex = businessInfo.selectedSuperpowers.indexOf(superpower.name);
                    
                    return (
                      <motion.button
                        key={superpower.name}
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                        onClick={() => toggleSuperpower(superpower.name)}
                        className={`p-3 rounded-xl border transition-all duration-300 relative ${
                          isSelected
                            ? 'bg-blue-500/30 border-blue-400 text-white'
                            : 'bg-white/5 border-white/20 text-blue-200 hover:border-blue-400 hover:text-white'
                        }`}
                      >
                        <div className="flex items-center gap-2">
                          <span className="text-lg">{superpower.emoji}</span>
                          <span className="text-sm font-medium">{superpower.name}</span>
                        </div>
                        {isSelected && (
                          <motion.div
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            className="absolute -top-2 -right-2 w-6 h-6 rounded-full bg-gradient-to-r from-blue-400 to-orange-400 flex items-center justify-center text-white shadow-lg"
                          >
                            <span className="text-xs font-bold">{selectionIndex + 1}</span>
                          </motion.div>
                        )}
                      </motion.button>
                    );
                  })}
                </div>

                {businessInfo.selectedSuperpowers.length > 0 && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    className="mt-4 p-3 glass-card rounded-xl"
                  >
                    <p className="text-blue-200 text-sm mb-2">–ö–ª—é—á–µ–≤—ã–µ —Å–∏–ª—ã –∫–æ–º–ø–∞–Ω–∏–∏:</p>
                    <div className="flex flex-wrap gap-2">
                      {businessInfo.selectedSuperpowers.map((name, index) => {
                        const sp = BUSINESS_SUPERPOWERS.find(s => s.name === name);
                        return (
                          <div
                            key={name}
                            className="px-3 py-1 bg-blue-500/20 border border-blue-400/30 rounded-full flex items-center gap-2"
                          >
                            <span className="text-sm">{sp?.emoji}</span>
                            <span className="text-sm text-white">{name}</span>
                            <span className="text-xs text-blue-200">#{index + 1}</span>
                          </div>
                        );
                      })}
                    </div>
                  </motion.div>
                )}
              </div>
            </motion.div>
          </div>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="p-6">
          <motion.button
            whileHover={canContinue ? { scale: 1.02, y: -2 } : {}}
            whileTap={canContinue ? { scale: 0.98 } : {}}
            onClick={canContinue ? handleComplete : undefined}
            disabled={!canContinue}
            className={`w-full px-8 py-4 font-semibold rounded-2xl shadow-xl flex items-center justify-center gap-3 transition-all duration-300 ${
              canContinue
                ? 'bg-gradient-to-r from-blue-500 to-orange-500 text-white hover:shadow-2xl hover:shadow-blue-500/25'
                : 'bg-white/10 text-blue-300 cursor-not-allowed'
            }`}
          >
            {canContinue ? (
              <>
                <Sparkles size={20} />
                –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤!
                <ArrowRight size={20} />
              </>
            ) : (
              <>
                {!businessInfo.companyName ? '–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ' : 
                 !businessInfo.industry ? '–í—ã–±–µ—Ä–∏ –æ—Ç—Ä–∞—Å–ª—å' :
                 `–í—ã–±–µ—Ä–∏ ${3 - businessInfo.selectedSuperpowers.length} —Å–∏–ª—ã`}
              </>
            )}
          </motion.button>
        </div>

        {/* –ù–µ–æ–Ω–æ–≤—ã–µ —Ç–æ—á–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
        <div className="pb-8">
          <div className="flex justify-center gap-3 items-center mx-auto w-fit">
            {/* –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ */}
            {[...Array(4)].map((_, index) => (
              <motion.div
                key={index}
                initial={{ scale: 0.8 }}
                animate={{ scale: 1 }}
                className="relative"
              >
                <div className="w-2 h-2 rounded-full bg-gradient-to-r from-blue-400/60 to-orange-400/60"></div>
                <div className="absolute inset-0 w-2 h-2 rounded-full bg-gradient-to-r from-blue-400/40 to-orange-400/40 blur-[1px]"></div>
              </motion.div>
            ))}

            {/* –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—á–∫–∞ —Å –ø—É–ª—å—Å–∞—Ü–∏–µ–π */}
            <motion.div
              animate={{ 
                scale: [1, 1.3, 1],
                opacity: [1, 0.8, 1]
              }}
              transition={{ 
                duration: 2, 
                repeat: Infinity,
                ease: "easeInOut"
              }}
              className="relative"
            >
              <div className="w-3 h-3 rounded-full bg-gradient-to-r from-blue-400 to-orange-400"></div>
              <motion.div
                animate={{ 
                  scale: [1, 1.8, 1],
                  opacity: [0.6, 0.2, 0.6]
                }}
                transition={{ 
                  duration: 2, 
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
                className="absolute inset-0 w-3 h-3 rounded-full bg-gradient-to-r from-blue-400 to-orange-400 blur-sm"
              />
            </motion.div>

            {/* –ë—É–¥—É—â–∞—è —Ç–æ—á–∫–∞ */}
            <motion.div
              initial={{ scale: 0.8, opacity: 0.3 }}
              animate={{ 
                scale: [0.8, 1, 0.8],
                opacity: [0.3, 0.5, 0.3]
              }}
              transition={{ 
                duration: 3, 
                repeat: Infinity,
                ease: "easeInOut"
              }}
              className="relative"
            >
              <div className="w-2 h-2 rounded-full bg-white/20 border border-white/30"></div>
              <div className="absolute inset-0 w-2 h-2 rounded-full bg-white/10 blur-[1px]"></div>
            </motion.div>
          </div>
        </div>
      </div>
    </div>
  );
}
